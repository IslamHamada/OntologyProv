____________________________________________________________________________
One idea to create a mapping on columns with unique entries is to create the mapping on the provsql column itself. Since it's UUID, it's unique.

But if you try a command such as:

	select create_provenance_mapping('p1','student','provsql');

	But it returns an error:
	ERROR:  column "provsql" does not exist
	LINE 1: CREATE TABLE p1 AS SELECT provsql AS value, provenance FROM ...

Maybe I try to rename the column 

	alter table student rename column provsql to p;
	select create_provenance_mapping('p1','student','p');

	but you get another error:
	ERROR:  column "provsql" does not exist
	CONTEXT:  SQL statement "ALTER TABLE tmp_provsql RENAME provsql TO provenance"

So this approach doesn't work and rename the column back:

	alter table student_ rename column p to provsql;
____________________________________________________________________________

Then I thought I could just add a new column called pkey to both tables. The column type is uuid and generate uuid for every row
____________________________________________________________________________

alter table student add pkey UUID NOT NULL DEFAULT uuid_generate_v1();

select * from studen;

 name | country | subjects |                 pkey                 |               provsql                
------+---------+----------+--------------------------------------+--------------------------------------
 s4   | c2      |        1 | c591f148-33da-11eb-82ff-37aba873dfce | 97d60adb-4eb9-405e-a6b8-5efb9ee00e80
 s2   | c1      |        2 | c591f149-33da-11eb-82ff-37aba873dfce | cb9630e5-edf8-470b-982e-002a7549c12d
 s3   | c2      |        3 | c591f14a-33da-11eb-82ff-37aba873dfce | 2ceba2fa-8323-4fb0-8ee6-3790687988e7
 s1   | c1      |        4 | c591f14b-33da-11eb-82ff-37aba873dfce | 3c48375b-5b4b-4eec-b7f7-eb7a63de9ec3
 s7   | c2      |        1 | c591f14c-33da-11eb-82ff-37aba873dfce | b059acaa-3393-451f-802d-60abbdafe326
 s5   | c1      |        2 | c591f14d-33da-11eb-82ff-37aba873dfce | 3d83dcb9-573f-48f9-a480-e4fad74d46a6
 s6   | c2      |        3 | c591f14e-33da-11eb-82ff-37aba873dfce | 1e93608e-d975-4ec3-9f8d-e469a5fb832b

____________________________________________________________________________

alter table student2 add pkey UUID NOT NULL DEFAULT uuid_generate_v1();

select * from student2;

 name | age | subjects |                 pkey                 |               provsql                
------+-----+----------+--------------------------------------+--------------------------------------
 s1   |  20 |        1 | d6c80f06-33da-11eb-82ff-37aba873dfce | 23030052-f82a-473c-8cf3-72429a293404
 s2   |  20 |        2 | d6c80f07-33da-11eb-82ff-37aba873dfce | 2fc071cc-7408-4e76-9eaa-7dcc6a7be944
 s3   |  20 |        3 | d6c80f08-33da-11eb-82ff-37aba873dfce | 5e163b08-2e9a-40e7-8c88-0251abd0abb8
 s4   |  20 |        4 | d6c80f09-33da-11eb-82ff-37aba873dfce | 7a6e8b2c-4392-4b18-846b-7fcab643f4ae

____________________________________________________________________________
Then I create a mapping for each then create a 3rd mapping of the union

select create_provenance_mapping('pkey1','student','pkey');
select create_provenance_mapping('pkey2','student2','pkey');

create table pkey3 as (select * from pkey1 union select * from pkey2);
____________________________________________________________________________

select country,age,formula(provenance(),'pkey3') from student join student2 on student.subjects=student2.subjects;

 country | age |                                    formula                                    |               provsql                
---------+-----+-------------------------------------------------------------------------------+--------------------------------------
 c2      |  20 | (c591f148-33da-11eb-82ff-37aba873dfce ⊗ d6c80f06-33da-11eb-82ff-37aba873dfce) | a680fbb4-272a-55bb-926f-4b51fed33eb6
 c1      |  20 | (c591f149-33da-11eb-82ff-37aba873dfce ⊗ d6c80f07-33da-11eb-82ff-37aba873dfce) | 84f78eab-e134-524f-960f-05f866099b28
 c2      |  20 | (c591f14a-33da-11eb-82ff-37aba873dfce ⊗ d6c80f08-33da-11eb-82ff-37aba873dfce) | 3434860e-2a8b-54a7-8ede-60d8fbda41f1
 c1      |  20 | (c591f14b-33da-11eb-82ff-37aba873dfce ⊗ d6c80f09-33da-11eb-82ff-37aba873dfce) | cfcf4c15-26b3-52ad-88f7-14c60de32827
 c2      |  20 | (c591f14c-33da-11eb-82ff-37aba873dfce ⊗ d6c80f06-33da-11eb-82ff-37aba873dfce) | 32cf9e4e-ad28-586a-a6a2-4175d0591af8
 c1      |  20 | (c591f14d-33da-11eb-82ff-37aba873dfce ⊗ d6c80f07-33da-11eb-82ff-37aba873dfce) | fceae17f-7c89-5a01-8c21-e8d40ea0fd91
 c2      |  20 | (c591f14e-33da-11eb-82ff-37aba873dfce ⊗ d6c80f08-33da-11eb-82ff-37aba873dfce) | 34901aae-49e6-592c-8133-bdba83119e2a

Now you get provenance formula with no ambiguity about the entries of the tables student and student2
____________________________________________________________________________

select *,formula(provenance(),'pkey3') from result join result2 on result.country<>result2.country;

 country | age | country | age |                                                                                                                                                                                                                                               formula                                                                                                                                                                                                                                               |               provsql                

 c1      |  20 | c2      |  20 | (((c591f149-33da-11eb-82ff-37aba873dfce ⊗ d6c80f07-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14b-33da-11eb-82ff-37aba873dfce ⊗ d6c80f09-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14d-33da-11eb-82ff-37aba873dfce ⊗ d6c80f07-33da-11eb-82ff-37aba873dfce)) ⊗ ((c591f148-33da-11eb-82ff-37aba873dfce ⊗ d6c80f09-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14a-33da-11eb-82ff-37aba873dfce ⊗ d6c80f08-33da-11eb-82ff-37aba873dfce)))                                                                                 | c1bc527d-2209-5f76-b035-ace661e64a93
 c2      |  20 | c1      |  20 | (((c591f148-33da-11eb-82ff-37aba873dfce ⊗ d6c80f06-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14a-33da-11eb-82ff-37aba873dfce ⊗ d6c80f08-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14c-33da-11eb-82ff-37aba873dfce ⊗ d6c80f06-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14e-33da-11eb-82ff-37aba873dfce ⊗ d6c80f08-33da-11eb-82ff-37aba873dfce)) ⊗ ((c591f149-33da-11eb-82ff-37aba873dfce ⊗ d6c80f07-33da-11eb-82ff-37aba873dfce) ⊕ (c591f14b-33da-11eb-82ff-37aba873dfce ⊗ d6c80f06-33da-11eb-82ff-37aba873dfce))) | 13fa8720-3fc4-535a-8ec2-d97dc3e532e8

